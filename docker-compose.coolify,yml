services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: go-app
    env_file:
      - .env
    environment:
      - PORT=${PORT}
    depends_on:
      - postgres
    volumes:
      - go_mod_cache:/go/pkg/mod:rw
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - coolify.managed=true

  postgres:
    image: postgres:14-alpine
    container_name: go-app-postgres
    ports:
      - "${POSTGRES_DB_PORT}:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
      - POSTGRES_HOST=${POSTGRES_DB_HOST}
      - POSTGRES_PORT=${POSTGRES_DB_PORT}
      - POSTGRES_SSLMODE=${POSTGRES_DB_SSLMODE}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    command: [
      "postgres",
      "-c", "max_connections=100",
      "-c", "shared_buffers=256MB",
      "-c", "work_mem=16MB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "effective_cache_size=512MB",
      "-c", "log_statement=none",
      "-c", "log_min_duration_statement=1000",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on"
    ]

networks:
  app-network:
    external: false

volumes:
  go_mod_cache:
  postgres-data: